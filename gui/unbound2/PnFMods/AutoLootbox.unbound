(def element LootboxesInset () layout=true dispatch_size_change=true
	(scope
		(macro STAGE_SIZE)
		(macro PULL_ROUTE "SC.Ui_windows.ROUTE.BARGE" "'isOnBarge'")
		(var gfStateWatcher:gfx = "$datahub.getFirstWatcher(CC.gamefaceGlobalState)")
		(var gfStateEntity:gfx = "gfStateWatcher.entity" (event "gfStateWatcher.event"))
		(var gfStateComponent:gfx = "gfStateEntity ? gfStateEntity.gamefaceGlobalState : null")
		(var gfStateHasControl:bool = "gfStateComponent ? gfStateComponent.gamefaceHasControl : false"	(event "gfStateComponent.evChanged")
																										(event "gfStateComponent.evGamefaceHasControlChanged"))

		(event evAddedToStage) 
	)

	(dispatch evAddedToStage on='addedToStage')

	(name = "'LootboxesInset'")

	(style (bind width "stageWidth") (bind height "stageHeight") (align = "center") (position = "absolute"))

	(controller $Instance renderer='LootboxesContent'
		(bind enabled "isOnBarge")
		# Mod
		(args
			_isGamefaceTopWindow = "gfStateHasControl"
		)
		#
	)

	# Mod
	(element AutoLootboxesCollector)
	#
)

(def element LootboxesContent (_isGamefaceTopWindow:bool=false) layout=true
	(class $FullsizeAbsolute)
	(element GamefaceWidget
		_gfName = "SC.Gameface.DATA_PROVIDER_NAME.LOOTBOXES"
		_gfPath = 'gui/gameface/build/barge/index.html'
	)

	# Mod
	(scope
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefs:gfx = "userPrefsComponent.userPrefs" watch=false (event "userPrefsComponent.evUserPrefsChanged"))

		(var isAutoCollectorEnabled:bool = "null != userPrefs.elementsGroupExpand && null != userPrefs.elementsGroupExpand.autoCollectLootbox			? userPrefs.elementsGroupExpand.autoCollectLootbox : true")
		(var selectedType:number = "null == userPrefs.selectedLootboxType && SC.Common.COMMON_LOOTBOX_TYPES.UNKNOWN != userPrefs.selectedLootboxType	? SC.Common.COMMON_LOOTBOX_TYPES.RESOURCES : userPrefs.selectedLootboxType")

		(var currentItemIndex:number = "selectedType - 1")

		# Must be identical to COMMON_LOOTBOX_TYPES. Credit: 1, Signals:2, Resources:3, Lucky: 4
		(var containerTypes:array = "['IDS_ECONOMICS_LOOTBOX_DESC', 'IDS_SIGNALS_LOOTBOX_HEADER', 'IDS_RESOURCES_LOOTBOX_DESC_HEADER', 'IDS_CHANCE_LOOTBOX_DESC_HEADER']")
		
		(event ItemChooser_BoxTypeSelected)
		(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': $event.selectedIndex + 1, 'name': 'selectedLootboxType'}]" init=false watch=false (event "ItemChooser_BoxTypeSelected"))
		(var toggleAutoCollectorMethod:array = "[{ type: 'inputMapping.onAction', name: 'setUserPref', args: {'value': !isAutoCollectorEnabled, 'name': 'elementsGroupExpand', 'subName': 'autoCollectLootbox'} } ]")

		(var bargeBannerCol:gfx = "$datahub.getCollection(CC.bargeBanner)")
		(var numBargeBanners:number = "bargeBannerCol ? min(1, bargeBannerCol.items.length) : 0" (event "bargeBannerCol.evAdded") (event "bargeBannerCol.evRemoved"))
		# max banners = 2 but its check is inclusive (banners <= 2 ? ok : no) so practically one banner is available apparently

		# LootboxesDataProvider
		(var accountComponent:gfx = "$datahub.getSingleComponent(CC.accountSelf)")
		(var recuitStatus:number = "accountComponent ? accountComponent.hasRecruitsStatus : SC.Common.HAS_RECRUITS_STATUS.UNKNOWN")
		(var isRecruitBannerVisible:bool = "recuitStatus == SC.Common.HAS_RECRUITS_STATUS.NO")

		(var numBanners:number = "numBargeBanners + isRecruitBannerVisible")

		(var header:number = 64px)			# PageHeader__header height
		(var banner:number = 120px)			# PromoBanner__wrapper height
		(var marginBottom:number = 14px)	# BannersContent__content margin-bottom
		(var dailyContainer:number = 160px)	# DailyContainer
		(var offset:number = 7px)			# Offset

		(var topPos:number = "header + (banner + marginBottom) * numBanners + dailyContainer + offset")

		(var appearAnimDuration:number = "0.5 + 0.3") # MainScreen__leftWrapper transition + DEFAULT_LEFT_CONTAINER_ANIMATION transition delay
		(var appearAnimDelay:number = "1.5 + 0.15") # DEFAULT_LEFT_CONTAINER_ANIMATION delay + DEFAULT_CHILD_VARIANTS_ANIMATION duration

		(var ubZindex:number = "_isGamefaceTopWindow ? ZIndex.BACKGROUND : ZIndex.FOREGROUND")

		(event evAddedToStage)
	)

	(dispatch evAddedToStage
		args="{}"
		init=false watch=false delay="appearAnimDelay" on='addedToStage'
	)

	(hblock
		(style
			(position = "absolute")
			(bind top "topPos")
			(width = 272px) # MainScreen__leftWrapper width
			(left = 20px) # MainScreen__content padding-left
			(paddingLeft = 16px) # DailyContainers__content padding

			(visualOffsetX = -200%)
			(alpha = 0)

			(align = "middle|left")
			(bind zindex "ubZindex")
		)
		(controller $Animation
			(bindcall play
				duration = "appearAnimDuration"
				from = "{visualOffsetX: -200%, alpha: 0}"
				to = "{visualOffsetX: 0%, alpha: 1}"
				(event "evAddedToStage")
			)
		)
		
		# ON/OFF
		(element SwitchWithRightLabel
			_state = "isAutoCollectorEnabled"
			_label = "tr('IDS_AUTOPURCHASE') + ':'"
			_methods = "toggleAutoCollectorMethod"
			_textClass = '$TextDefaultBoldNM'
		)
		# Selector
		(element ItemChooser
			_items = "containerTypes"
			_disabled = "!isAutoCollectorEnabled"
			_listItemRenderer = "'TextListItemRenderer'"
			_choosedItemRenderer = "'DefaultItemChooserPickedItemRenderer'"
			_onItemSelectedEvent = "'BoxTypeSelected'"
			_selectedMaxWidth = "200"
			_dropDownWidth = "200"
			_maxDropDownHeight = "200"
			_curIndex = "currentItemIndex"
			(style
				(bind alpha "isAutoCollectorEnabled ? 1 : 0.7")
			)
		)
	)
	#
)

(def element AutoLootboxesCollector() layout=false
	(scope
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefs:gfx = "userPrefsComponent.userPrefs" watch=false (event "userPrefsComponent.evUserPrefsChanged"))

		(var isAutoCollectorEnabled:bool = "null != userPrefs.elementsGroupExpand && null != userPrefs.elementsGroupExpand.autoCollectLootbox			? userPrefs.elementsGroupExpand.autoCollectLootbox : true")
		(var selectedType:number = "null == userPrefs.selectedLootboxType && SC.Common.COMMON_LOOTBOX_TYPES.UNKNOWN != userPrefs.selectedLootboxType	? SC.Common.COMMON_LOOTBOX_TYPES.RESOURCES : userPrefs.selectedLootboxType")

		(var configComponent:gfx = "$datahub.getSingleComponent(CC.lootboxConfigComponent)")
		(var storageComponent:gfx = "$datahub.getSingleComponent(CC.lootboxStorageComponent)")
		(var maxPurchaseableBoxes:number = "configComponent ? configComponent.maxBought : 0" (event "configComponent.evPricesUpdate")(event "configComponent.evGameParamsUpdate"))
		(var purchasedBoxes:number = "storageComponent ? storageComponent.boughtToday : 0" (event "storageComponent.evUpdate"))
		(var lootboxExp:number = "storageComponent ? storageComponent.lootExp : 0" (event "storageComponent.evUpdate"))

		(var isAllBoxesCollected:bool = "maxPurchaseableBoxes == purchasedBoxes")
		(var isDailyBoxAvailable:bool = "lootboxExp >= configComponent.prices[purchasedBoxes]" (event "configComponent.evPricesUpdate"))

		(var canCollectBox:bool = "isDailyBoxAvailable && !isAllBoxesCollected && isAutoCollectorEnabled")

		(event onBoxPurchased)
		(event onAutoCollectChanged)
		(event onAddedToStage)

		(event evBuyDailyBox)
	)

	(dispatch onBoxPurchased args="{}"			watch=false init=false delay=1 (bind trigger "purchasedBoxes"))
	(dispatch onAutoCollectChanged args="{}"	watch=false init=false (bind trigger "canCollectBox"))
	(dispatch onAddedToStage args="{}"			watch=false init=false on=addedToStage)
	
	(dispatch evBuyDailyBox args="{}" watch=false
		(bind enabled "canCollectBox")
		(event "onBoxPurchased")
		(event "onAutoCollectChanged")
		(event "onAddedToStage")
	)
	(bindcall externalCall 'inputMapping.onAction' "['LootboxProxy.buyLootbox', {userChoiceType: selectedType, forceStart: true}]" init=false watch=false (event "evBuyDailyBox"))
)